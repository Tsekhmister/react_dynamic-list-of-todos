{"version":3,"sources":["App.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","index.tsx"],"names":["TodoCase","TodoList","todos","userId","onUserSelect","handleChange","handleSelectChange","selectValue","query","className","htmlFor","type","name","id","value","onChange","length","map","todo","classNames","completed","readOnly","checked","title","onClick","getData","url","fetch","then","response","json","CurrentUser","selectedUser","useState","user","setUser","isLoading","setLoading","hasLoadingError","setLoadingError","useEffect","getUser","catch","email","phone","App","selectedUserId","setSelectedUserId","setTodos","setQuery","setSelectValue","event","target","queryCase","toLowerCase","preparedTodos","filter","includes","Completed","Not","getPreparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e75a4ec8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nenum TodoCase {\n  Completed = 'completed',\n  Not = 'not',\n}\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState<string>('all');\n\n  useEffect(() => {\n    getTodos().then(response => setTodos(response));\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectValue(value);\n  };\n\n  const getPreparedTodos = () => {\n    const queryCase = query.toLowerCase();\n\n    const preparedTodos = todos.filter(todo => (\n      todo.title.toLowerCase().includes(queryCase)\n    ));\n\n    switch (selectValue) {\n      case TodoCase.Completed:\n        return preparedTodos.filter(todo => todo.completed);\n      case TodoCase.Not:\n        return preparedTodos.filter(todo => !todo.completed);\n      default:\n        return preparedTodos;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          handleChange={handleChange}\n          handleSelectChange={handleSelectChange}\n          todos={getPreparedTodos()}\n          onUserSelect={setSelectedUserId}\n          userId={selectedUserId}\n          query={query}\n          selectValue={selectValue}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectedUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  userId: number,\n  onUserSelect: (userId: number) => void,\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  handleSelectChange: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  selectValue: string,\n  query: string,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  userId,\n  onUserSelect,\n  handleChange,\n  handleSelectChange,\n  selectValue,\n  query,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <label htmlFor=\"input\">\n      Filter by Title:\n      {' '}\n      <input\n        type=\"text\"\n        name=\"input\"\n        id=\"input\"\n        value={query}\n        onChange={handleChange}\n      />\n      <select\n        name=\"select\"\n        id=\"select\"\n        value={selectValue}\n        onChange={handleSelectChange}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"completed\">Completed</option>\n        <option value=\"not\">Not completed</option>\n      </select>\n    </label>\n\n    {todos.length ? (\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  id={`${todo.id}`}\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': todo.userId === userId },\n                )}\n                type=\"button\"\n                onClick={() => onUserSelect(todo.userId)}\n              >\n                {`User: ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ) : <p>Please wait, loading...</p>}\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nconst getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  selectedUser: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectedUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setLoading] = useState(false);\n  const [hasLoadingError, setLoadingError] = useState(false);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(response => setUser(response))\n      .then(() => setLoading(true))\n      .catch(() => setLoadingError(true));\n  }, [userId]);\n\n  return (\n    <>\n      {!isLoading && (\n        <p>Loading...</p>\n      )}\n\n      {(isLoading && hasLoadingError) && (\n        <p>Failed loading data</p>\n      )}\n\n      {(isLoading && !hasLoadingError) && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {user?.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          <button\n            type=\"button\"\n            onClick={() => selectedUser(0)}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}