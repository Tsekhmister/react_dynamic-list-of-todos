{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","userId","onUserSelect","useState","query","setQuery","selectValue","setSelectValue","className","htmlFor","type","name","id","value","onChange","event","target","length","queryCase","toLowerCase","preparedTodos","filter","todo","title","includes","completed","getPreparedTodos","map","classNames","readOnly","checked","onClick","getData","url","fetch","then","response","json","CurrentUser","selectedUser","user","setUser","useEffect","getUser","email","phone","App","selectedUserId","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f49cb5c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  userId: number,\n  onUserSelect: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  userId,\n  onUserSelect,\n}) => {\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState<string>('all');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectValue(value);\n  };\n\n  const getPreparedTodos = () => {\n    const queryCase = query.toLowerCase();\n\n    const preparedTodos = todos.filter(todo => (\n      todo.title.toLowerCase().includes(queryCase)\n    ));\n\n    switch (selectValue) {\n      case 'completed':\n        return preparedTodos.filter(todo => todo.completed);\n      case 'not':\n        return preparedTodos.filter(todo => !todo.completed);\n      default:\n        return preparedTodos;\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label htmlFor=\"input\">\n        Filter by Title:\n        {' '}\n        <input\n          type=\"text\"\n          name=\"input\"\n          id=\"input\"\n          value={query}\n          onChange={handleChange}\n        />\n        <select\n          name=\"select\"\n          id=\"select\"\n          value={selectValue}\n          onChange={handleSelectChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"not\">Not completed</option>\n        </select>\n      </label>\n\n      {todos.length ? (\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {getPreparedTodos().map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    id={`${todo.id}`}\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': todo.userId === userId },\n                  )}\n                  type=\"button\"\n                  onClick={() => onUserSelect(todo.userId)}\n                >\n                  {`User: ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : <p>Please wait, loading...</p>}\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nconst getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  selectedUser: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectedUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {user?.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <button\n        type=\"button\"\n        onClick={() => selectedUser(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos().then(response => setTodos(response));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onUserSelect={setSelectedUserId}\n          userId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectedUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}