{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","userId","onUserSelect","handleChange","handleSelectChange","selectValue","query","className","htmlFor","type","name","id","value","onChange","length","map","todo","classNames","completed","readOnly","checked","title","onClick","getData","endpoint","fetch","then","response","json","getUser","CurrentUser","selectedUser","useState","user","setUser","isLoading","setLoading","textLoadingUser","useMemo","uploadUser","useCallback","a","useEffect","email","phone","App","selectedUserId","setSelectedUserId","setTodos","setQuery","setSelectValue","event","target","queryCase","toLowerCase","preparedTodos","filter","includes","getPreparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.976c099d.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  userId: number,\n  onUserSelect: (userId: number) => void,\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  handleSelectChange: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  selectValue: string,\n  query: string,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  userId,\n  onUserSelect,\n  handleChange,\n  handleSelectChange,\n  selectValue,\n  query,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <label htmlFor=\"input\">\n      Filter by Title:\n      {' '}\n      <input\n        type=\"text\"\n        name=\"input\"\n        id=\"input\"\n        value={query}\n        onChange={handleChange}\n      />\n      <select\n        name=\"select\"\n        id=\"select\"\n        value={selectValue}\n        onChange={handleSelectChange}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"completed\">Completed</option>\n        <option value=\"not\">Not completed</option>\n      </select>\n    </label>\n\n    {todos.length ? (\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  id={`${todo.id}`}\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': todo.userId === userId },\n                )}\n                type=\"button\"\n                onClick={() => onUserSelect(todo.userId)}\n              >\n                {`User: ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ) : <p>Please wait, loading...</p>}\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nconst getData = (endpoint: string) => {\n  return fetch(`${BASE_URL}${endpoint}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import React, {\n  useEffect,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  selectedUser: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectedUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setLoading] = useState(true);\n\n  const textLoadingUser = useMemo(() => {\n    return isLoading ? <p>Loading...</p> : <p>User not found</p>;\n  }, [isLoading]);\n\n  const uploadUser = useCallback(async () => {\n    setLoading(true);\n    setUser(null);\n    setUser(await getUser(userId));\n    setLoading(false);\n  }, [userId]);\n\n  useEffect(() => {\n    uploadUser();\n  }, [userId]);\n\n  return (\n    !user\n      ? textLoadingUser\n      : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {user?.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          <button\n            type=\"button\"\n            onClick={() => selectedUser(0)}\n          >\n            Clear\n          </button>\n        </div>\n      )\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState<string>('all');\n\n  useEffect(() => {\n    getTodos().then(response => setTodos(response));\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectValue(value);\n  };\n\n  const getPreparedTodos = () => {\n    const queryCase = query.toLowerCase();\n\n    const preparedTodos = todos.filter(todo => (\n      todo.title.toLowerCase().includes(queryCase)\n    ));\n\n    switch (selectValue) {\n      case 'completed':\n        return preparedTodos.filter(todo => todo.completed);\n      case 'not':\n        return preparedTodos.filter(todo => !todo.completed);\n      default:\n        return preparedTodos;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          handleChange={handleChange}\n          handleSelectChange={handleSelectChange}\n          todos={getPreparedTodos()}\n          onUserSelect={setSelectedUserId}\n          userId={selectedUserId}\n          query={query}\n          selectValue={selectValue}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectedUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}